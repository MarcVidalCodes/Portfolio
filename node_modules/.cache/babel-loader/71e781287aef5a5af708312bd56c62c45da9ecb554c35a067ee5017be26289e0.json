{"ast":null,"code":"var _jsxFileName = \"/Users/marcvidal/Documents/Code/MarcVidalPortfolio/src/contexts/tab/TabProvider.js\",\n  _s = $RefreshSig$();\nimport { useState, useMemo, useCallback, useEffect } from 'react';\nimport TabContext from './TabContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TabProvider(_ref) {\n  _s();\n  let {\n    initialTabs,\n    children\n  } = _ref;\n  const [tabHistory, setTabHistory] = useState(initialTabs);\n  const [tabList, setTabList] = useState(initialTabs);\n\n  // Set initial home tab name in history for handling popstate events\n  useEffect(() => {\n    window.history.replaceState({\n      tabName: 'Home'\n    }, '', '');\n  }, []);\n\n  // On popstate (i.e., back/forward history event) check if tab is open\n  // If tab is not open go back further, switch to that tab\n  useEffect(() => {\n    const handlePop = () => {\n      const tabName = window.history.state.tabName;\n      if (tabName) {\n        const tab = tabList.find(t => t.name === tabName);\n        if (tab) {\n          setTabHistory(prev => [tab, ...prev.filter(t => t.name !== tab.name)]);\n        } else {\n          window.history.back();\n        }\n      }\n    };\n    window.addEventListener('popstate', handlePop);\n    return () => window.removeEventListener('popstate', handlePop);\n  });\n\n  // Check if tab is already open (e.g., in tabList), if not add it\n  // Then switch to that tab\n  const addTab = useCallback(tab => {\n    if (!tabList.find(t => t.name === tab.name)) {\n      setTabList(prev => [...prev, tab]);\n    }\n    switchTabs(tab);\n  }, [tabList]);\n\n  // Remove tab from tab list and tab history\n  const removeTab = tab => {\n    setTabList(prev => prev.filter(t => t.name !== tab.name));\n    setTabHistory(prev => prev.filter(t => t.name !== tab.name));\n  };\n\n  // Push tab name to window history to allow navigation via popstate\n  // Then change tab history to switch to new tab\n  const switchTabs = tab => {\n    window.history.pushState({\n      tabName: tab.name\n    }, '', '');\n    setTabHistory(prev => [tab, ...prev.filter(t => t.name !== tab.name)]);\n  };\n  const value = useMemo(() => ({\n    current: tabHistory[0],\n    tabList,\n    addTab,\n    removeTab,\n    switchTabs\n  }), [tabList, tabHistory, addTab]);\n  return /*#__PURE__*/_jsxDEV(TabContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(TabProvider, \"9oDUt/difFkZUfcqeIJny5CgHjQ=\");\n_c = TabProvider;\nexport default TabProvider;\nvar _c;\n$RefreshReg$(_c, \"TabProvider\");","map":{"version":3,"names":["useState","useMemo","useCallback","useEffect","TabContext","jsxDEV","_jsxDEV","TabProvider","_ref","_s","initialTabs","children","tabHistory","setTabHistory","tabList","setTabList","window","history","replaceState","tabName","handlePop","state","tab","find","t","name","prev","filter","back","addEventListener","removeEventListener","addTab","switchTabs","removeTab","pushState","value","current","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/marcvidal/Documents/Code/MarcVidalPortfolio/src/contexts/tab/TabProvider.js"],"sourcesContent":["import { useState, useMemo, useCallback, useEffect } from 'react';\nimport TabContext from './TabContext';\n\nfunction TabProvider({ initialTabs, children }) {\n  const [tabHistory, setTabHistory] = useState(initialTabs);\n  const [tabList, setTabList] = useState(initialTabs);\n\n  // Set initial home tab name in history for handling popstate events\n  useEffect(() => {\n    window.history.replaceState({ tabName: 'Home' }, '', '');\n  }, []);\n\n  // On popstate (i.e., back/forward history event) check if tab is open\n  // If tab is not open go back further, switch to that tab\n  useEffect(() => {\n    const handlePop = () => {\n      const tabName = window.history.state.tabName\n      if (tabName) {\n        const tab = tabList.find(t => t.name === tabName)\n        if (tab) {\n          setTabHistory(prev => ([tab, ...prev.filter(t => t.name !== tab.name)]));\n        } else {\n          window.history.back();\n        }\n      }\n    };\n\n      window.addEventListener('popstate', handlePop);\n      return () => window.removeEventListener('popstate', handlePop);\n  });\n\n  // Check if tab is already open (e.g., in tabList), if not add it\n  // Then switch to that tab\n  const addTab = useCallback((tab) => {\n    if (!tabList.find(t => (t.name === tab.name))) {\n      setTabList(prev => ([...prev, tab]));\n    }\n\n    switchTabs(tab);\n  }, [tabList]);\n\n  // Remove tab from tab list and tab history\n  const removeTab = (tab) => {\n    setTabList(prev => (prev.filter(t => t.name !== tab.name)));\n    setTabHistory(prev => (prev.filter(t => t.name !== tab.name)));\n  };\n\n  // Push tab name to window history to allow navigation via popstate\n  // Then change tab history to switch to new tab\n  const switchTabs = (tab) => {\n    window.history.pushState({ tabName: tab.name }, '', '');\n    setTabHistory(prev => ([tab, ...prev.filter(t => t.name !== tab.name)]));\n  };\n\n  const value = useMemo(() => (\n    {\n      current: tabHistory[0],\n      tabList,\n      addTab,\n      removeTab,\n      switchTabs\n    }\n  ), [tabList, tabHistory, addTab])\n\n  return (\n    <TabContext.Provider value={value}>\n      {children}\n    </TabContext.Provider>\n  );\n}\n\nexport default TabProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}